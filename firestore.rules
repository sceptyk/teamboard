rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
  	match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /teams/{teamId} {
      function memberRole() {
        return get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role;
      }
      
      function hasWriteAccess() {
    		let role = memberRole();
      	return request.auth != null && (role == "moderator" || role == "owner");
      }
      
      function hasReadAccess() {
      	return request.auth != null && exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
      }
      
      allow get: if hasReadAccess();
      allow list: if request.auth != null && request.auth.uid in resource.data.members;
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid;
      allow update: if hasWriteAccess() || (
      	hasReadAccess()
        && request.resource.data.members.hasAll(resource.data.members)
        && !(request.auth.uid in resource.data.members)
        && request.auth.uid in request.resource.data.members
      );
      allow delete: if hasWriteAccess();

      match /members/{memberId} {
				function isInvitationFresh() {
        	return request.resource.data.invitation != null
          	&& request.time < (duration.time(24, 0, 0, 0) + get(/databases/$(database)/documents/teams/$(teamId)/invitations/$(request.resource.data.invitation)).data.date); 
        }
      
      	allow read: if hasReadAccess();
      	allow create: if request.auth != null && (
          (request.resource.data.role == 'owner' && get(/databases/$(database)/documents/teams/$(teamId)).data.owner == request.auth.uid)
          || (request.resource.data.role != 'owner' && hasWriteAccess())
          || (request.resource.data.role == 'viewer' && isInvitationFresh())
        );
        allow update: if hasWriteAccess() && request.resource.data.role != 'owner';
        allow delete: if request.auth != null && (request.auth.uid == memberId || hasWriteAccess());
    	}
      
      match /invitations/{invitationId} {
    		allow get: if request.auth != null;
        allow create: if request.resource.data.date == request.time && hasWriteAccess();
    	}
      
      match /planning-boards/{planningBoardId} {
    		allow read: if hasReadAccess();
        allow write: if hasWriteAccess();
        
        match /active-users/{activeUserId} {
    			allow read: if hasReadAccess();
          allow write: if request.auth != null && request.auth.uid == activeUserId;
    		}
        
        match /tickets/{ticketId} {
    			allow read: if hasReadAccess();
          allow write: if hasWriteAccess();
    		}
    	}
      
      match /retro-boards/{retroBoardId} {
    		allow read: if hasReadAccess();
        allow write: if hasWriteAccess();
        
        match /cards/{cardId} {
    			allow read: if hasReadAccess();
          allow write: if hasWriteAccess();
    		}
    	}
    }
  }
}